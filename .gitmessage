# <type>(<scope>): <subject>
#
# <body>
#
# <footer>

# --- CONVENTIONAL COMMIT GUIDELINES ---
#
# Types:
#   feat:     A new feature (minor version bump)
#   fix:      A bug fix (patch version bump)
#   docs:     Documentation only changes (patch for README)
#   style:    Changes that do not affect the meaning of the code
#   refactor: A code change that neither fixes a bug nor adds a feature
#   perf:     A code change that improves performance (patch version bump)
#   test:     Adding missing tests or correcting existing tests
#   build:    Changes that affect the build system or external dependencies
#   ci:       Changes to our CI configuration files and scripts
#   chore:    Other changes that don't modify src or test files
#   revert:   Reverts a previous commit (patch version bump)
#
# Scope (optional):
#   jsx, css, types, config, docs, ci, etc.
#
# Subject:
#   - Use imperative, present tense: "change" not "changed" nor "changes"
#   - Don't capitalize first letter
#   - No period (.) at the end
#   - Limit to 50 characters
#
# Body (optional):
#   - Use imperative, present tense
#   - Include motivation for the change and contrasts with previous behavior
#   - Wrap at 72 characters
#
# Footer (optional):
#   - Reference issues: "Fixes #123", "Closes #456"
#   - Breaking changes: "BREAKING CHANGE: description"
#
# Examples:
#   feat(jsx): add support for compiled JSX patterns
#   fix(css): handle edge case in template literal parsing
#   docs: update README with new configuration options
#   feat!: remove deprecated API methods
#   
#   BREAKING CHANGE: The legacy API has been removed.
#   Use the new API instead.